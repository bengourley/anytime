doctype html
html
  head
    meta(charset='utf8')
    title Anytime – a JavaScript date and time picker
    link(rel='stylesheet', href='https://fonts.googleapis.com/css?family=Roboto:300,100,400,700')
    link(rel='stylesheet', href='./index.css')
  body
    .main-container
      header.main-header
        h1.main-title Anytime
        h2.subtitle A JS date and time picker
        .splash
          .splash__input
            input(type='text', disabled, placeholder='If not now, when?').js-splash-input
            button.js-splash-button Select a time
          .splash__prose
            ul
              li Say goodbye to jQuery and jQuery UI!
              li Modularity FTW! For use with browserify
              li Only 4 lines of essential CSS (the rest is up to you)
              li Works in modern browsers: Chrome, FF, Safari, Edge

            pre.terminal: code.terminal__content $ npm i --save anytime

      .docs
        h1: a(id='usage', href='#usage') Usage

        p The only supported way of using Anytime is with browserify.

        pre.code-sample: code.
          var Anytime = require('anytime')

        p.
          <a href="https://github.com/bengourley/anytime/blob/master/src/anytime.css">Here’s
          the minimum CSS required</a> to get Anytime functional. It’ll look pretty bare
          and I’m sure you’ll want to style it up. There are plenty of classes on each
          component that you can hook into for styling.

        h2: a(id='constructor', href='#constructor') Creating a date/time picker:
        pre.code-sample: code.
          var p = new Anytime(options)

        h3: a(id='options', href='#options') Options
        table(cellpadding='0' cellspacing='0')
          thead
            tr
              td Name
              td Type
              td Description
              td Default

          tbody
            tr
              td: code input
              td HTMLInputElement
              td: p An input whose value should update when the picker’s value changes.
              td: code null

            tr
              td: code anchor
              td HTMLElement
              td: p An element that the picker will orient itself near when displayed. If <code>options.input</code> is not provided, this option is required.
              td: code options.input

            tr
              td: code button
              td HTMLElement
              td: p An element that when clicked will show/hide the picker interface.
              td: code null

            tr
              td: code minYear
              td Number
              td: p The earliest year that can be shown or selected in the picker interface.
              td: code 1960

            tr
              td: code maxYear
              td Number
              td: p The latest year that can be shown or selected in the picker interface.
              td: code 2030

            tr
              td: code minuteIncrement
              td Number
              td: p By default anytime will show every minute. Set this to 5 or 15 etc to show fewer options at greater intervals.
              td: code 1

            tr
              td: code offset
              td Number
              td: p The distance (px) from <code>options.anchor</code> the picker interface should be displayed.
              td: code 5

            tr
              td: code initialValue
              td Date
              td: p The initial value to set the picker’s internal value.
              td: code null

            tr
              td: code initialView
              td Date
              td: p Value to indicate which month/year to display when picker is first shown. If <code>options.initialValue</code> is selected, that will take precedence.
              td: code new Date()

            tr
              td: code format
              td String
              td: p moment-style date format string.
              td: code 'h:mma on dddd D MMMM YYYY'

            tr
              td: code moment
              td <code>moment</code>, <code>moment-timezone</code>
              td: p By default anytime uses an instance of moment in the browser’s timezone with the English locale. If you want to use a different language or a different timezone, you must load in a locale to <code>moment</code> and/or pass in a version of <code>moment-timezone</code>.
              td: code moment

            tr
              td: code timezone
              td String
              td: p moment-style timezone string (e.g. 'Europe/London'). <strong>Only functions if <code>moment-timezone</code> is provided as <code>options.moment</code>!</strong>
              td Browser’s timezone

            tr
              td: code doneText
              td String
              td: p Set the text of the button that closes the picker interface.
              td: code 'Done'

            tr
              td: code clearText
              td String
              td: p Set the text of the button that clears the picker value and closes the picker interface.
              td: code 'Clear'

            tr
              td: code timeSliders
              td Boolean
              td: p Use sliders instead of the default dropdowns for the time input.
              td: code false

            tr
              td: code timeSlidersTitle
              td String
              td: p Set the text of the label before the time sliders.
              td: code 'Time:'

            tr
              td: code timeSlidersHourTitle
              td String
              td: p Set the text of the label before the hour slider.
              td: code 'Hour:'

            tr
              td: code timeSliderMinuteTitle
              td String
              td: p Set the text of the label before the minute slider.
              td: code 'Minute:'

            tr
              td: code shortMonthNames
              td Boolean
              td: p Choose whether to abbreviate month names, e.g "Jan" vs. "January".
              td: code true

        h2: a(id='api', href='#api') API

        h3: a(id='render', href='#render') p.render()
        p Renders the picker interface. This method must be called before <code>p.show()</code> is called.

        h3: a(id='show', href='#show') p.show()
        p Displays the picker interface.

        h3: a(id='hide', href='#hide') p.hide()
        p Removes the picker interface from display.

        h3: a(id='toggle', href='#toggle') p.toggle()
        p Shows the picker if it is currently hidden, hides it if currently displayed.

        h3: a(id='update', href='#update') p.update(value or fn)
        p Update the internal value of the picker. This will also update the related input (if there is one).
        p There are two ways to update the value:

        h4: a(id='update-value', href='#update-value') Pass a value
        pre.code-sample: code.
          p.update(new Date(2015, 4, 0)) // JS Date object
          p.update('2015-06-10T12:16:47.997Z') // String
          p.update(null) // Clear the value

        h4: a(id='update-fn', href='#update-fn') Use a function to manipulate the internal moment object
        p The return value is used to set the new date so you must return the moment object!
        pre.code-sample: code.
          picker.update(function (m) {
            return m.add(1, 'day') // increment the day
          })

        h3: a(id='change', href='#change') p.on('change', fn)
        p When a value is selected (or cleared) with the picker, the change event will emit with the new value.

        pre.code-sample: code.
          p.on('change', function (d) {
            // When set, d will be a date
            // When cleared d will be null
            console.log('The new date/time is…', d)
          })

        h3: a(id='destroy', href='#destroy') p.destroy()
        p Removes all event listeners and removes the picker interface element from the DOM.

        h2: a(id='examples', href='#examples') Examples

        h3: a(id='i18n', href='#i18n') i18n
        p.
          To use anytime in a language other than the default (English) you need to load in your desired locale
          to <code>moment</code> and pass it in as an option like so:

        pre.code-sample: code.
          var moment = require('moment')
          require('moment/locale/fr')
          moment.locale('fr')
          var picker = new Anytime({ moment: moment })

        p If you want timezone support, you must pass in a <code>moment-timezone</code> instance and set the timezone option:

        pre.code-sample: code.
          var moment = require('moment-timezone')
          require('moment/locale/fr')
          moment.locale('fr')
          var picker = new Anytime({ moment: moment, timezone: 'Europe/Paris' })

      footer.main-footer
        p Made by Ben Gourley at <a href='http://www.clock.co.uk/'>Clock</a>.

  script(src='index.js')
